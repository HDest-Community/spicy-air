version "4.5"

class SpicyAirHandler : EventHandler
{
	int BreathHoldTimer[MAXPLAYERS];
	int RealSpiciness[MAXPLAYERS];

	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'ClipBoxPickup':
				if (random[desprand]() <= 24)
				{
					e.Replacement = "DespicytoFilter";
				}
				break;
		}
	}

	override void RenderUnderlay(RenderEvent e)
	{
		let plr = HDPlayerPawn(players[consoleplayer].mo);
		if (!plr)
		{
			return;
		}
		
		let Mask = Despicyto(plr.FindInventory('Despicyto'));
		if (Mask && Mask.Worn && !automapactive)
		{
			int MaskHeight = int(Screen.GetHeight() * 1.3);
			int MaskWidth = int(Screen.GetWidth() * MaskHeight * 1.2) / Screen.GetHeight();
			int MaskOffX = -((MaskWidth - Screen.GetWidth()) >> 1);
			int MaskOffY = -((MaskHeight - Screen.GetHeight()) >> 1);

			double BreathFactor = Mask.BreathIndex / double(Mask.GetBreathDelay());
			BreathFactor = min(1.0, abs(BreathFactor > 0 ? BreathFactor * 2.25 : BreathFactor));

			let goggles = PortableLiteAmp(plr.FindInventory('PortableLiteAmp'));
			if (goggles && goggles.worn)
			{
				BreathFactor *= 0.16 - (goggles.amplitude / PortableLiteAmp.NITEVIS_MAX) * 0.12;
			}
			Screen.DrawTexture(TexMan.CheckForTexture("DESPMOIS"), true, MaskOffX - (int(plr.hudbob.x * 0.5)), MaskOffY - (int(plr.hudbob.y * 0.5)), DTA_Alpha, BreathFactor, DTA_DestWidth, MaskWidth, DTA_DestHeight, MaskHeight);
			if (!goggles || !goggles.worn)
			{
				Screen.DrawTexture(TexMan.CheckForTexture("DESPMASK"), true, MaskOffX - (int(plr.hudbob.x * 0.5)), MaskOffY - (int(plr.hudbob.y * 0.5)), DTA_DestWidth, MaskWidth, DTA_DestHeight, MaskHeight);
			}
		}
	}

	override void WorldTick()
	{
		let plr = HDPlayerPawn(players[consoleplayer].mo);
		if (!plr)
		{
			return;
		}

		if (plr.CurSector.WasSecret() || plr.CurSector.GetUDMFInt('user_nonspicysector') == 1)
		{
			BreathHoldTimer[consoleplayer] = 35 * 30;
			RealSpiciness[consoleplayer] = 0;
		}
		else
		{
			if (BreathHoldTimer[consoleplayer] > 0)
			{
				RealSpiciness[consoleplayer] = 0;
				BreathHoldTimer[consoleplayer]--;
			}
			else
			{
				let Mask = Despicyto(plr.FindInventory('Despicyto'));
				if ((!Mask || !Mask.Worn || Mask.A_GetTotalAir(false) == 0))
				{
					if (++RealSpiciness[consoleplayer] >= 70)
					{
						RealSpiciness[consoleplayer] = 0;
						SendNetworkEvent("DSP_DealAggro");
					}
				}
				else
				{
					RealSpiciness[consoleplayer] = 0;
				}
			}
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		let plr = HDPlayerPawn(players[e.Player].mo);
		if (!plr || plr.Health < 0 || e.IsManual)
		{
			return;
		}

		if (e.Name ~== "DSP_DealAggro")
		{
			plr.A_SetBlend(0xa7b55e, 0.15, 12);
			plr.aggravateddamage++;
		}
	}
}

class Despicyto : HDWeapon
{
	enum DEProperties
	{
		DEProp_Flags,
		DEProp_UseOffset,
		DEProp_FilterLife1,
		DEProp_FilterLife2,
	}

	override void Tick()
	{
		Super.Tick();

		if (!owner)
		{
			Worn = false;
			return;
		}

		if (Worn)
		{
			if (!BreathingVolume)
			{
				BreathingVolume = CVar.GetCVar('spicy_breathingvolume', owner.player);
			}
			double BVol = clamp(BreathingVolume.GetFloat(), 0, 1);
			if (BVol > 0)
			{
				let plr = HDPlayerPawn(owner);
				int bDelay = GetBreathDelay();
				int bSpeed = GetBreathSpeed();
				if (BreathIndex == 0)
				{
					owner.A_StartSound("SpicyAir/Mask/BreatheOut"..bSpeed, 35, CHANF_LOCAL, BVol, pitch: frandom(0.98, 1.0));
				}
				BreathIndex++;
				if (BreathIndex >= bDelay)
				{
					BreathIndex = -bDelay;
					owner.A_StartSound("SpicyAir/Mask/BreatheIn"..bSpeed, 36, CHANF_LOCAL, BVol, pitch: frandom(0.98, 1.0));
					if (WeaponStatus[DEProp_FilterLife1] > 0)
					{
						WeaponStatus[DEProp_FilterLife1]--;
					}
					else if (WeaponStatus[DEProp_FilterLife2] > 0)
					{
						WeaponStatus[DEProp_FilterLife2]--;
					}
				}
			}
			IsToxic = !owner.CurSector.WasSecret() && owner.CurSector.GetUDMFInt('user_nonspicysector') != 1;
		}
	}
	clearscope action int A_GetTotalAir(bool percentage)
	{
		int F1 = percentage ? int(ceil((invoker.WeaponStatus[DEProp_FilterLife1] / double(DespicytoFilter.MaxAir)) * 50)) : invoker.WeaponStatus[DEProp_FilterLife1];
		int F2 = percentage ? int(ceil((invoker.WeaponStatus[DEProp_FilterLife2] / double(DespicytoFilter.MaxAir)) * 50)) : invoker.WeaponStatus[DEProp_FilterLife2];
		return (F1 >= 0 ? F1 : 0) + (F2 >= 0 ? F2 : 0);
	}
	clearscope int GetBreathDelay()
	{
		let plr = HDPlayerPawn(owner);
		return 90 - int(min(plr.fatigue * 2, 80));
	}
	clearscope int GetBreathSpeed()
	{
		return 3 - int(min(GetBreathDelay() / 35, 2));
	}

	private action void A_AddOffset(int ofs)
	{
		invoker.WeaponStatus[DEProp_UseOffset] += ofs;
	}

	override bool Use(bool pickup)
	{
		if (owner && Worn)
		{
			A_UnwearMask();
			return false;
		}

		return Super.Use(pickup);
	}

	override bool AddSpareWeapon(Actor newowner) {return AddSpareWeaponRegular(newowner);}
	override HDWeapon GetSpareWeapon(Actor newowner, bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override string, double GetPickupSprite()
	{
		int F1 = WeaponStatus[DEProp_FilterLife1];
		int F2 = WeaponStatus[DEProp_FilterLife2];

		string Frame = "D";
		if (F1 >= 0 && F2 >= 0)
		{
			Frame = "A";
		}
		if (F1 >= 0 && F2 == -1)
		{
			Frame = "B";
		}
		else if (F1 == -1 && F2 >= 0)
		{
			Frame = "C";
		}
		return "DSPG"..Frame.."0", 1.0;
	}
	override int GetSbarNum(int flags)
	{
		let HDHud = HDStatusBar(StatusBar);

		HDHud.SavedColour = Font.CR_DARKGRAY;
		return A_GetTotalAir(true);
	}
	override int DisplayAmount()
	{
		let HDHud = HDStatusBar(StatusBar);
		return Worn ? IsToxic : ActualAmount;
	}
	override string GetHelpText()
	{
		string BaseString = WEPHELP_RELOAD.."  Place left filter\n"
		..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Place right filter\n"
		..WEPHELP_UNLOAD.."  Remove left filter\n"
		..WEPHELP_USE.."+"..WEPHELP_UNLOAD.."  Remove right filter";
		return BaseString;
	}
	override double WeaponBulk() { return Worn ? 5 : 22; }
	override bool IsBeingWorn() { return Worn; }
	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		vector2 bob = hpl.hudbob * 0.3;
		int Offset = WeaponStatus[DEProp_UseOffset];
		bob.y += Offset;
		
		sb.DrawImage(GetPickupSprite(), bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER, alpha: 1.0, scale:(4, 4));
		if (WeaponStatus[DEProp_FilterLife1] >= 0)
		{
			sb.DrawString(sb.mAmountFont, sb.FormatNumber(WeaponStatus[DEProp_FilterLife1], 3, 3, sb.FNF_FILLZEROS), (-40, 44) + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT, Font.CR_DARKGRAY);
		}
		if (WeaponStatus[DEProp_FilterLife2] >= 0)
		{
			sb.DrawString(sb.mAmountFont, sb.FormatNumber(WeaponStatus[DEProp_FilterLife2], 3, 3, sb.FNF_FILLZEROS), (40, 44) + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_DARKGRAY);
		}
	}
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[DEProp_FilterLife1] = DespicytoFilter.MaxAir;
		WeaponStatus[DEProp_FilterLife2] = DespicytoFilter.MaxAir;
	}
	override void LoadoutConfigure(string input)
	{
		int Worn = GetLoadoutVar(input, "worn", 1);
		if (Worn > 0)
		{
			A_WearMask();
		}
		int LF = GetLoadoutVar(input, "lf", 4);
		if (LF > 0)
		{
			WeaponStatus[DEProp_FilterLife1] = min(LF, DespicytoFilter.MaxAir);
		}
		int RF = GetLoadoutVar(input, "rf", 4);
		if (RF > 0)
		{
			WeaponStatus[DEProp_FilterLife2] = min(RF, DespicytoFilter.MaxAir);
		}
	}

	private action void A_WearMask()
	{
		if (invoker.Worn)
		{
			return;
		}

		let Handler = SpicyAirHandler(EventHandler.Find("SpicyAirHandler"));
		Handler.BreathHoldTimer[PlayerNumber()] = 0;

		A_StartSound("weapons/pocket", 9);
		invoker.Worn = true;
		A_SetBlend(0x000000, 1.0, 16);
	}
	private action void A_UnwearMask()
	{
		if (A_GetTotalAir(false) > 0)
		{
			int ToTake = 10;
			int F1 = invoker.WeaponStatus[DEProp_FilterLife1];
			int F2 = invoker.WeaponStatus[DEProp_FilterLife2];

			if (invoker.IsToxic)
			{
				if (F1 > 0)
				{
					invoker.WeaponStatus[DEProp_FilterLife1] -= min(ToTake, F1);
					ToTake -= min(ToTake, F1);
				}
				if (F2 > 0)
				{
					invoker.WeaponStatus[DEProp_FilterLife2] -= min(ToTake, F2);
					ToTake -= min(ToTake, F2);
				}
			}

			let Handler = SpicyAirHandler(EventHandler.Find("SpicyAirHandler"));
			Handler.BreathHoldTimer[invoker.owner.PlayerNumber()] = 35 * (3 * (10 - ToTake));
			invoker.owner.A_StartSound("SpicyAir/Mask/BreatheIn1", 36, CHANF_LOCAL, clamp(invoker.BreathingVolume.GetFloat(), 0, 1), pitch: frandom(0.98, 1.0));
		}
		invoker.BreathIndex = 0;
		invoker.owner.A_StartSound("weapons/pocket", 9);
		invoker.owner.A_SetBlend(0x000000, 1.0, 16);
		invoker.Worn = false;
	}

	Default
	{
		+INVENTORY.INVBAR
		+HDWEAPON.FITSINBACKPACK
		+WEAPON.WIMPY_WEAPON
		Tag "Gas mask";
		HDWeapon.RefId "dsp";
		Inventory.Icon "DSPGA0";
		Scale 0.35;
		Inventory.PickupSound "weapons/pocket";
		Inventory.PickupMessage "Picked up a gas mask.";
		HDWeapon.WornLayer STRIP_RADSUIT + 1;
	}

	private transient CVar BreathingVolume;
	bool Worn;
	int BreathIndex;
	private bool IsToxic;

	States
	{
		Spawn:
			DSPG A 0 NoDelay
			{
				int F1 = invoker.WeaponStatus[DEProp_FilterLife1];
				int F2 = invoker.WeaponStatus[DEProp_FilterLife2];
				if (F1 >= 0 && F2 >= 0)
				{
					frame = 0;
				}
				else if (F1 >= 0 && F2 == -1)
				{
					frame = 1;
				}
				else if (F1 == -1 && F2 >= 0)
				{
					frame = 2;
				}
				else
				{
					frame = 3;
				}
			}
			DSPG # -1;
			Stop;
		Select:
			TNT1 A 0 A_AddOffset(200);
			Goto Super::Select;
		Ready:
			TNT1 A 1
			{
				if (PressingUser3())
				{
					A_MagManager("DespicytoFilter");
					return;
				}

				int off = invoker.WeaponStatus[DEProp_UseOffset];
				if (off > 0)
				{
					invoker.WeaponStatus[DEProp_UseOffset] = off * 2 / 3;
				}

				if (PressingFire() || PressingAltfire())
				{
					SetWeaponState("Lower");
					return;
				}

				A_WeaponReady(WRF_ALL | WRF_NOFIRE);
			}
			Goto ReadyEnd;
		Lower:
			TNT1 AA 1 A_AddOffset(6);
			TNT1 AAAA 1 A_AddOffset(18);
			TNT1 AAAAA 1 A_AddOffset(36);
			TNT1 A 0 A_JumpIf(!PressingFire() && !PressingAltfire(), "Ready");
			TNT1 A 1 A_WearMask();
		Hold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("Hold");
			TNT1 A 0 A_SelectWeapon("HDFist");
			Goto Deselect;
		Unload:
			TNT1 A 20;
			TNT1 A 5
			{
				int Which = PressingUse() ? DEProp_FilterLife2 : DEProp_FilterLife1;
				int Air = invoker.WeaponStatus[Which];
				if (Air < 0)
				{
					return;
				}
				if (PressingUnload() || PressingReload())
				{
					HDMagAmmo.GiveMag(self, "DespicytoFilter", Air);
					A_StartSound("weapons/pocket", 9);
					A_SetTics(20);
				}
				else
				{
					HDBattery.SpawnMag(self, "DespicytoFilter", Air);
				}
				invoker.WeaponStatus[Which] = -1;
				invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
			}
			Goto ReloadEnd;
		Reload:
			TNT1 A 14 A_StartSound("weapons/pocket", 9);
			TNT1 A 5
			{
				int Which = PressingUse() ? DEProp_FilterLife2 : DEProp_FilterLife1;
				if (invoker.WeaponStatus[Which] >= 0)
				{
					return;
				}

				let Filter = HDMagAmmo(FindInventory("DespicytoFilter"));
				if(!Filter)
				{
					return;
				}
				int Air = Filter.TakeMag(true);
				invoker.WeaponStatus[Which] = Air;
				A_StartSound("weapons/vulcopen1", 8, CHANF_OVERLAP);
				invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
			}
			Goto ReloadEnd;
		ReloadEnd:
			TNT1 A 6;
			Goto ready;
	}
}

class DespicytoFilter : HDMagAmmo
{
	override string, string, name, double GetMagSprite(int thismagamt)
	{
		return "DSPFA0", "TNT1A0", "DespicytoFilter", 0.5;
	}

	override bool Insert() { return false; }
	override bool Extract() { return false; }
	override void GetItemsThatUseThis()
	{
		ItemsThatUseThis.Push("Despicyto");
	}

	const MaxAir = 60 * 15;

	Default
	{
		HDMagAmmo.MustShowInMagManager true;
		Inventory.PickupMessage "Picked up an air filter.";
		Inventory.PickupSound "weapons/pocket";
		Inventory.icon "DSPFA0";
		Tag "Air filter";
		HDMagAmmo.MaxPerUnit MaxAir;
		HDMagAmmo.MagBulk 16;
		HDMagAmmo.RoundBulk 0;
		HDPickup.RefId "dsf";
		Scale 0.25;
	}

	States
	{
		Spawn:
			DSPF A -1 NoDelay
			{
				if (invoker.Mags[0] == 0)
				{
					bROLLSPRITE = true;
					bROLLCENTER = true;
					roll = randompick(-90, 90);
				}
			}
			Stop;
	}
}