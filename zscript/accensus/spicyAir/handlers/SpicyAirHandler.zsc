class SpicyAirHandler : EventHandler {

    int BreathIndex[MAXPLAYERS];
    int BreathHoldTimer[MAXPLAYERS];
    double AirSpiciness[MAXPLAYERS];
    int RealSpiciness[MAXPLAYERS];
    int SpicyLevel[MAXPLAYERS];

    Array<Name> monsterClasses;
    Array<Name> monsterExceptions;

    Array<Name> fragClasses;
    Array<Name> fragExceptions;

    Array<Name> barrelClasses;
    Array<Name> barrelExceptions;

    Array<Sector> hurtfloorSectors;
    Array<Sector> outdoorSectors;
    Array<Sector> secretSectors;

    private transient Service _HHFunc;
    private transient Service _RespService;

    private transient CVar _enabled;

    private transient CVar _losFactor;

    private transient CVar _actorSectorRatio;
    private transient CVar _distCalc;

    private transient CVar _damageType;
    private transient CVar _maxSpiciness;

    private transient CVar _spicySources;
    private transient CVar _spicySinks;

    private transient CVar _spicySourceDistance;
    private transient CVar _spicySinkDistance;

    private transient CVar _minKillReq;
    private transient CVar _maxKillReq;

    private transient CVar _damageThreshold;
    private transient CVar _radsuitProtection;
    private transient CVar _hhelmetProtection;

    override void WorldLoaded(WorldEvent e) {

        InitCvars();
        InitArrays();

        if (e.IsReopen) return;

        // Initialize  Status
        for (int i = 0; i < MAXPLAYERS; i++) {
            BreathIndex[i] = 0;
            AirSpiciness[i] = 0;
            RealSpiciness[i] = 0;
            SpicyLevel[i] = 0;
            BreathHoldTimer[i] = Level.AirSupply; // * players[i].mo.AirCapacity;
        }

        foreach (sector : Level.sectors) {
            if (sector.IsSecret()) secretSectors.Push(sector);
            if (sector.GetTexture(1) == skyflatnum) outdoorSectors.Push(sector);
            if (sector.damageAmount > 0) hurtfloorSectors.Push(sector);
        }
    }

    override void WorldUnloaded(WorldEvent e) {
        hurtfloorSectors.clear();
        outdoorSectors.clear();
        secretSectors.clear();
    }

    override void RenderUnderlay(RenderEvent e) {
        let plr = HDPlayerPawn(e.Camera);
        if (!plr || plr.bINVISIBLE || plr.bSHADOW) {
            return;
        }
        
        let mask = Despicyto(plr.FindInventory('Despicyto'));
        bool hasHelmet = _HHFunc && _HHFunc.GetIntUI("GetShowHUD", objectArg: plr);

        if (
            (
                (mask && mask.Worn)
                || (hasHelmet && _hhelmetProtection.GetInt() > 0)
            )
            && !automapactive
        ) {
            int MaskHeight = int(Screen.GetHeight() * 2.2);
            int MaskWidth = int(Screen.GetWidth() * MaskHeight * 1.2) / Screen.GetHeight();
            int MaskOffX = -((MaskWidth - Screen.GetWidth()) >> 1);
            int MaskOffY = -((MaskHeight - Screen.GetHeight()) >> 1);

            let goggles = PortableLiteAmp(plr.FindInventory('PortableLiteAmp'));

            // Only handle breathing animation if Spicy Air is enabled
            if (_enabled.GetBool()) {
                double breathFactor = BreathIndex[plr.PlayerNumber()] / double(GetBreathDelay(plr));
                double breathAlpha = clamp(CVar.GetCVar('spicy_breathalpha', players[plr.PlayerNumber()]).GetFloat(), 0.0, 1.0);
                breathFactor = 0.1 + min(1.0, abs(breathFactor > 0 ? breathFactor * 2.25 : breathFactor)) * breathAlpha;

                if (goggles && goggles.worn) {
                    breathFactor *= 0.1 - (goggles.amplitude / PortableLiteAmp.NITEVIS_MAX) * 0.05;
                }

                if (breathFactor > 0.0) {
                    Screen.DrawTexture(TexMan.CheckForTexture("DESPMOIS"), true, MaskOffX - (int(plr.wepbob.x * 0.5)), MaskOffY - (int(plr.wepbob.y * 0.5)), DTA_Alpha, breathFactor, DTA_DestWidth, MaskWidth, DTA_DestHeight, MaskHeight);
                }
            }

            // Rendering the Overlay can happen even if the mod is disabled,
            // as the gas mask feels a bit pointless otherwise.
            double maskAlpha = clamp(CVar.GetCVar('spicy_gasmaskalpha', players[plr.PlayerNumber()]).GetFloat(), 0.0, 1.0);
            if ((mask && mask.Worn) && !(goggles && goggles.worn) && maskAlpha > 0.0) {
				Screen.DrawTexture(TexMan.CheckForTexture("DESPMASK"), true, MaskOffX - (int(plr.wepbob.x * 0.5)), MaskOffY - (int(plr.wepbob.y * 0.5)), DTA_Alpha, maskAlpha, DTA_DestWidth, MaskWidth, DTA_DestHeight, MaskHeight);
            }
        }
    }

    override void WorldTick() {

        if (!_enabled) InitCvars();

        if (!_enabled.GetBool() || Level.IsFrozen()) return;
        
        InitArrays();

        // TODO: Refactor following logic into separate functions
        for (int i = 0; i < MAXPLAYERS; i++) {
            let plr = HDPlayerPawn(players[i].mo);

            if (!plr || plr.Health <= 0 || plr.player.cheats&(CF_GODMODE2|CF_GODMODE)) continue;

            // Handle Player Breathing
            // -----------------------
            // The player is "currently breathing" if:
            // - They are not submerged underwater, or if they are, they're wearing a UaS Respirator and it has air in it
            // - They are wearing a gas mask
            // - They are wearing a Hideous Helmet and it provides protection against spicy air
            let mask = Despicyto(plr.FindInventory('Despicyto'));
            bool hasHelmet = _HHFunc && _HHFunc.GetInt("GetShowHUD", objectArg: plr);
            bool wearingRespirator = _RespService && _RespService.GetInt("IsWorn", objectArg: plr);
            bool respiratorAir = _RespService && _RespService.GetInt("AirRemaining", objectArg: plr);
            int bDelay = GetBreathDelay(plr);
            if (
                (plr.WaterLevel < 3 || (wearingRespirator && respiratorAir > 0))
                || (mask && mask.Worn)
                || (hasHelmet && _hhelmetProtection.GetInt() > 0)
            ) {
                BreathIndex[i]++;

                if (BreathIndex[i] >= bDelay) BreathIndex[i] = -bDelay;
            } else {
                BreathIndex[i] = 0;
            }

            // Display Visual/Auditory Feedback of breathing
            if ((mask && mask.Worn) || (hasHelmet && _hhelmetProtection.GetInt() > 0)) {
                int bSpeed = GetBreathSpeed(plr);

                double vol = clamp(CVar.GetCVar('spicy_breathingvolume', players[i]).GetFloat(), 0, 1);
                
                if (BreathIndex[i] == 0 && vol > 0) {
                    plr.A_StartSound("SpicyAir/Mask/BreatheOut"..bSpeed, 35, CHANF_LOCAL, vol, pitch: frandom[breathrand](0.97, 1.0));
                }

                if (BreathIndex[i] == -bDelay) {

                    if (vol > 0) {
                        plr.A_StartSound("SpicyAir/Mask/BreatheIn"..bSpeed, 36, CHANF_LOCAL, vol, pitch: frandom[breathrand](0.97, 1.0));
                    }

                    if (mask && mask.Worn) {
                        if (mask.weaponStatus[DEProp_FilterLife1] > 0) {
                            mask.weaponStatus[DEProp_FilterLife1]--;
                        } else if (mask.weaponStatus[DEProp_FilterLife2] > 0) {
                            mask.weaponStatus[DEProp_FilterLife2]--;
                        }
                    }
                }
            }

            // Handle Air Toxicity Logic
            // -------------------------
            // - If the air being breathed in is clean, adjust "breath hold timer" depending if the player is underwater or wearing a respirator providing air
            // - If the air being breathed in is clean or filtered, reduce spiciness while the player is breathing out
            // - If the air being breathed in is not clean nor filtered, if the player has breath left to hold, reduce timer; otherwise add spiciness while the player is breathing in
            // - If the player has gathered enough spiciness in their system, increase their spicy level
            // - As long as the player still has some amount of spiciness levels in their system, every time the timer ticks, add aggro based on their spicy level
            let aggroTime = 35 * GetAggroThreshold(plr);

            let maxSpiciness = _maxSpiciness.GetInt();
            let rawSpiciness = GetAirSpiciness(plr);
            let spiciness = clamp(round(rawSpiciness), -maxSpiciness, maxSpiciness);

            // Store the raw spiciness for service to provide.
            AirSpiciness[i] = rawSpiciness;

            if (IsAirClean(plr) || AirSpiciness[i] <= 0.0) {

                if (hd_debug && !(Level.time % TICRATE)) Console.PrintF("[Player #"..(i + 1).."] Air is clean! "..(BreathHoldTimer[i] / 35).."s"..", "..RealSpiciness[i]);

                if (BreathIndex[i] > 0) RealSpiciness[i] -= max(RealSpiciness[i] / aggroTime, abs(spiciness));
                else if (BreathIndex[i] < 0) BreathHoldTimer[i] = clamp(BreathHoldTimer[i] + ((plr.WaterLevel < 3 || (wearingRespirator && respiratorAir > 0)) ? 5 : -1), 0, Level.AirSupply * plr.AirCapacity);
            } else if (IsAirFiltered(plr)) {

                if (hd_debug && !(Level.time % TICRATE)) Console.PrintF("[Player #"..(i + 1).."] Air is filtered! "..(BreathHoldTimer[i] / 35).."s"..", "..RealSpiciness[i]);
                
                if (BreathIndex[i] > 0) RealSpiciness[i] -= max(RealSpiciness[i] / aggroTime, abs(spiciness));
                BreathHoldTimer[i] = clamp(BreathHoldTimer[i] + 3, 0, Level.AirSupply * plr.AirCapacity);
            } else if (BreathHoldTimer[i] > 0) {

                if (hd_debug && !(Level.time % TICRATE)) Console.PrintF("[Player #"..(i + 1).."] Air is spicy! "..(BreathHoldTimer[i] / 35).."s"..", "..RealSpiciness[i]);

                BreathHoldTimer[i] = clamp(BreathHoldTimer[i] - 1, 0, Level.AirSupply * plr.AirCapacity);
            } else {

                if (hd_debug && !(Level.time % TICRATE)) Console.PrintF("[Player #"..(i + 1).."] Air is spicy, too spicy! Breathing "..(BreathIndex[i] < 0 ? "in" : "out")..", "..RealSpiciness[i]);

                // If we're breathing in while it's spicier than the player,
                // or we're breathing out while it's not spicier than the player,
                // adjust the player's raw spiciness level.
                if (
                    (BreathIndex[i] < 0 && (AirSpiciness[i] * 100) > RealSpiciness[i])
                    || (BreathIndex[i] > 0 && (AirSpiciness[i] * 100) < RealSpiciness[i])
                ) {
                    // Force increase when breathing in, decrease when breathing out
                    // RealSpiciness[i] += spiciness;
                    RealSpiciness[i] += (BreathIndex[i] < 0 ? frandom(1 - (0.1 * maxSpiciness), 1 + (0.1 * maxSpiciness)) : -frandom(0.0001 * (10 - maxSpiciness), 0.001 * (10 - maxSpiciness))) * abs(AirSpiciness[i] - RealSpiciness[i]);
                }

                // if (BreathIndex[i] < 0 && RealSpiciness[i] <= 0.0 && BreathHoldTimer[i] < (Level.AirSupply * plr.AirCapacity)) BreathHoldTimer[i]++;
            }

            RealSpiciness[i] = clamp(RealSpiciness[i], 0, aggroTime * maxSpiciness);
            SpicyLevel[i] = clamp(RealSpiciness[i] / aggroTime, 0, maxSpiciness);

            if (hd_debug && !(Level.time % TICRATE)) Console.PrintF("[Player #"..(i + 1).."] Spiciness Level: "..(RealSpiciness[i] / aggroTime));

            if (SpicyLevel[i] > 0 && !(Level.time % aggroTime)) {
                if (hd_debug) Console.PrintF("[Player #"..(i + 1).."] Oof ouch, my blood! x"..SpicyLevel[i]);

                DealSpicyDamage(plr, SpicyLevel[i]);
            }
        }
    }

    private void InitCvars() {
        if (!_HHFunc) _HHFunc                           = ServiceIterator.Find("HHFunc").Next();
        if (!_RespService) _RespService                 = ServiceIterator.Find("UaS_RespiratorStatus").Next();

        if (!_enabled) _enabled                         = CVar.GetCVar('spicy_enabled');

        if (!_losFactor) _losFactor                     = CVar.GetCVar('spicy_los_factor');

        if (!_actorSectorRatio) _actorSectorRatio       = CVar.GetCVar('spicy_actor_sector_ratio');
        if (!_distCalc) _distCalc                       = CVar.GetCVar('spicy_dist_calc');

        if (!_damageType) _damageType                   = CVar.GetCVar('spicy_damage_type');
        if (!_maxSpiciness) _maxSpiciness               = CVar.GetCVar('spicy_max_spiciness');

        if (!_damageThreshold) _damageThreshold         = CVar.GetCVar('spicy_damagethreshold');
        if (!_radsuitProtection) _radsuitProtection     = CVar.GetCVar('spicy_radsuitprotection');
        if (!_hhelmetProtection) _hhelmetProtection     = CVar.GetCVar('spicy_hhelmetprotection');

        if (!_spicySources) _spicySources               = CVar.GetCVar('spicy_sources');
        if (!_spicySinks) _spicySinks                   = CVar.GetCVar('spicy_sinks');

        if (!_spicySourceDistance) _spicySourceDistance = CVar.GetCVar('spicy_source_distance');
        if (!_spicySinkDistance) _spicySinkDistance     = CVar.GetCVar('spicy_sink_distance');

        if (!_minKillReq) _minKillReq                   = CVar.GetCVar('spicy_min_kill_req');
        if (!_maxKillReq) _maxKillReq                   = CVar.GetCVar('spicy_max_kill_req');
    }

    private void InitArrays() {
        if (!monsterClasses.Size()) {
            monsterClasses.push('HDMobBase');
        }

        if (!monsterExceptions.Size()) {
            monsterExceptions.push('HDBarrel');
            monsterExceptions.push('HDFollower');
        }
        
        if (!fragClasses.Size()) {
            fragClasses.push('BFGNecroShard');
        }

        // if (!fragExceptions.Size()) {
        //     fragExceptions.push('');
        // }
        
        if (!barrelClasses.Size()) {
            barrelClasses.push('HDBarrel');
        }

        // if (!barrelExceptions.Size()) {
        //     barrelExceptions.push('');
        // }
    }

    // The air is considered clean if:
    //  - The current map is the Firing Range or Reloading Room
    //  - The player is currently inside of a sector marked as non-spicy
    //  - The player is currently in deep water and doing so is considered clean
    bool IsAirClean(HDPlayerPawn plr) {

        bool cleanLevel = Level.mapName == 'RANGE' || Level.mapName == 'ReloadingRoom';

        if (hd_debug && !(Level.time % TICRATE)) Console.PrintF("Current Level: "..Level.mapName);


        bool cleanSector = plr.CurSector.GetUDMFInt('user_nonspicysector') == 1;

        if (hd_debug && !(Level.time % TICRATE) && cleanSector) Console.PrintF("Current Sector is Clean: Special");


        bool cleanUnderwater = _spicySinks.GetInt()&SASF_SINK_UNDERWATER && plr.WaterLevel >= 3;

        if (hd_debug && !(Level.time % TICRATE) && cleanUnderwater) Console.PrintF("Current Sector is Clean: Underwater");

        return cleanLevel|cleanSector|cleanUnderwater;
    }

    bool IsAirFiltered(HDPlayerPawn plr) {
        let mask = Despicyto(plr.FindInventory('Despicyto'));

        return mask && mask.Worn && mask.A_GetTotalAir(false) > 0;
    }

    clearscope int GetBreathDelay(HDPlayerPawn plr) {
        return 90 - int(min(max(plr.fatigue * 2, plr.bloodpressure / 1.3, 110 * (1.0 - plr.beatmax / 35.0)), 80));
    }

    clearscope int GetBreathSpeed(HDPlayerPawn plr) {
        return 3 - int(min(GetBreathDelay(plr) / 35, 2));
    }

    double GetAirSpiciness(HDPlayerPawn plr) {
        int spicySinks = _spicySinks.GetInt();
        double activeSinks = (spicySinks&SASF_SINK_OUTDOORS ? GetProximityToCleanSectors(plr, SASF_SINK_OUTDOORS) : 0)
            + (spicySinks&SASF_SINK_SECRETS ? GetProximityToCleanSectors(plr, SASF_SINK_SECRETS) : 0);

        int losFactor = _losFactor.GetInt();
        int spicySources = _spicySources.GetInt();
        double activeSources = (spicySources&SASF_SPICY_MONSTERS ? GetProximityToSpicyActors(plr, monsterClasses, monsterExceptions, losFactor) : 0)
            + (spicySources&SASF_SPICY_FRAG ? GetProximityToSpicyActors(plr, fragClasses, fragExceptions, losFactor) : 0)
            + (spicySources&SASF_SPICY_BARRELS ? GetProximityToSpicyActors(plr, barrelClasses, barrelExceptions, losFactor) : 0)
            + (spicySources&SASF_SPICY_FRIENDLY ? GetProximityToSpicyActors(plr, monsterClasses, monsterExceptions, losFactor, SASF_SPICY_FRIENDLY) : 0)
            + (spicySources&SASF_SPICY_BOSSES ? GetProximityToSpicyActors(plr, monsterClasses, monsterExceptions, losFactor, SASF_SPICY_BOSSES) : 0)
            + (spicySources&SASF_SPICY_HURTFLOOR ? GetProximityToSpicySectors(plr, SASF_SPICY_HURTFLOOR) : 0)
            + (spicySources&SASF_SPICY_OUTDOORS ? GetProximityToSpicySectors(plr, SASF_SPICY_OUTDOORS) : 0)
            + (spicySources&SASF_SPICY_SECRETS ? GetProximityToSpicySectors(plr, SASF_SPICY_SECRETS) : 0);

        if (hd_debug && !(Level.time % TICRATE)) Console.PrintF(
            "Spicy Sources: "..spicySources..", Active Sources: "..activeSources.."\n"
            .."Spicy Sinks: "..spicySinks..", Active Sinks: "..activeSinks.."\n"
            .."Air Spiciness: "..(activeSources - activeSinks)
        );

        return activeSources - activeSinks;
    }

    int GetAggroThreshold(HDPlayerPawn plr) {
        let totalBonus = 0.0;
        
        if (plr.FindInventory('WornRadsuit')) {
            totalBonus += _radsuitProtection.GetInt();
        }
        
        if (_HHFunc && _HHFunc.GetInt("GetShowHUD", objectArg: plr)) {
            totalBonus += _hhelmetProtection.GetInt();
        }
        
        let threshold = _damageThreshold.GetInt();
        return threshold + (threshold * totalBonus);
    }

    private double GetProximityToSpicyActors(
        HDPlayerPawn plr,
        Array<Name> whitelist,
        Array<Name> blacklist,
        float losFactor = 1.0,
        int flags = 0
    ) {
        let count = 0;
        let value = 0.0;

        foreach (sourceName : whitelist) {
            let iter = ThinkerIterator.create(sourceName);

            Actor mo;
            while (mo = Actor(iter.next())) {

                if (
                    mo.health > 0
                    && !IsSourceAnException(mo, blacklist)
                    && (!!(flags&SASF_SPICY_FRIENDLY) == mo.bFRIENDLY)
                    && (!!(flags&SASF_SPICY_BOSSES) == mo.bBOSS)
                ) {
                    let canSeePlayer = mo.CheckSight(plr);
                    let dist = max(1, plr.Distance3D(mo));

                    if (canSeePlayer || losFactor > 0) {
                        value += calcDist(
                            mo.SpawnHealth()
                              * ((mo.scale.x + mo.scale.y) / 2.0)
                              * (canSeePlayer ? 1.0 : (losFactor / 100.0)),
                            _spicySourceDistance.GetFloat() * HDCONST_ONEMETRE,
                            dist
                        );
                        count++;
                    }
                }
            }

            // Adjust raw value by distance factor, then average across all actors
            value = value * (_actorSectorRatio.GetFloat() / 100.0); // / max(1, count);

            if (hd_debug && !(Level.time % TICRATE)) Console.PrintF(
                "Proximity to "
                ..(flags&SASF_SPICY_FRIENDLY ? "friendly " : "")
                ..(flags&SASF_SPICY_BOSSES ? "boss " : "")
                .."'"..sourceName.."': "
                ..value * 100
            );
        }

        return value * 100;
    }

    private bool IsSourceAnException(Actor source, Array<Name> exceptions) {
        foreach (exception : exceptions) if (source is exception) return true;
        return false;
    }

    private double GetProximityToSpicySectors(HDPlayerPawn plr, int flags = 0) {
        let value = 0.0;

        if (flags&SASF_SPICY_HURTFLOOR) value += GetDistanceFromSectors(plr, hurtfloorSectors, _spicySourceDistance.GetFloat(), SASF_SPICY_HURTFLOOR, Color(255, 0, 255, 0));
        if (flags&SASF_SPICY_OUTDOORS)  value += GetDistanceFromSectors(plr, outdoorSectors,   _spicySourceDistance.GetFloat(), SASF_SPICY_OUTDOORS,  Color(255, 255, 255, 255));
        if (flags&SASF_SPICY_SECRETS)   value += GetDistanceFromSectors(plr, secretSectors,    _spicySourceDistance.GetFloat(), SASF_SPICY_SECRETS,   Color(255, 255, 255, 0));
        
        // Adjust raw value by distance factor, then average across all sectorss
        value = value * ((100 - _actorSectorRatio.GetFloat()) / 100.0) / max(1, (flags&SASF_SPICY_HURTFLOOR ? hurtfloorSectors.size() : 0) + (flags&SASF_SPICY_OUTDOORS ? outdoorSectors.size() : 0) + (flags&SASF_SPICY_SECRETS ? secretSectors.size() : 0));

        if (hd_debug && !(Level.time % TICRATE)) Console.PrintF(
            "Proximity to spicy "
            ..(flags&SASF_SPICY_HURTFLOOR ? "damaging " : "")
            ..(flags&SASF_SPICY_OUTDOORS ? "outdoor " : "")
            ..(flags&SASF_SPICY_SECRETS ? "secret " : "")
            .."sectors: "
            ..value
        );

        return value;
    }

    private double GetProximityToCleanSectors(HDPlayerPawn plr, int flags = 0) {
        let value = 0.0;

        if (flags&SASF_SINK_OUTDOORS) value += GetDistanceFromSectors(plr, outdoorSectors, _spicySinkDistance.GetFloat(), SASF_SINK_OUTDOORS, Color(255, 255, 255, 255));
        if (flags&SASF_SINK_SECRETS)  value += GetDistanceFromSectors(plr, secretSectors,  _spicySinkDistance.GetFloat(), SASF_SINK_SECRETS,  Color(255, 255, 255, 0));

        // Adjust raw value by distance factor, then average across all sectorss
        value = value * ((100 - _actorSectorRatio.GetFloat()) / 100.0) / max(1, (flags&SASF_SINK_OUTDOORS ? outdoorSectors.size() : 0) + (flags&SASF_SINK_SECRETS ? secretSectors.size() : 0));

        if (hd_debug && !(Level.time % TICRATE)) Console.PrintF(
            "Proximity to clean "
            ..(flags&SASF_SINK_OUTDOORS ? "outdoor " : "")
            ..(flags&SASF_SINK_SECRETS ? "secret " : "")
            .."sectors: "
            ..value
        );

        return value;
    }

    private double GetDistanceFromSectors(HDPlayerPawn plr, Array<Sector> sectors, double distFactor, int flags = 0, Color debugColor = 0) {
        double distance = 0.0;

        foreach (sector : sectors) {
            let area = HDCore.getSectorArea(sector);
            let pos  = HDCore.getSectorCenter(sector);

            if (hd_debug) HDCore.drawSectorDebug(sector, debugColor, size: 10.0);

            let dist = max(sqrt(area / HDCONST_PI), (pos - plr.pos).length());

            let sizeFactor = flags&SASF_SPICY_HURTFLOOR ? clamp(sector.damageAmount, 0.0, 100.0) / 25.0 : 1.0;

            distance += calcDist(area * sizeFactor, distFactor * HDCONST_ONEMETRE, dist);
        }

        return distance;
    }

    private double calcDist(double amount, double factor, double dist) {
        let af = amount * factor;
        let denom = max(1.0, min(af, dist));

        switch (_distCalc.GetInt()) {
            case SADC_INVERSE_SQUARE:
                return af / (denom * denom);
            case SADC_INVERSE_SQRT:
                return (af / sqrt(denom)) - sqrt(af);
            case SADC_REVERSE_LOG:
                return (amount / factor) * max(1.0, log10(max(1.0, factor - dist)));
            case SADC_REVERSE_SQRT:
                return (amount / (factor * factor)) * sqrt(af - dist);
            case SADC_LINEAR:
            default:
                return (af - dist) / max(1.0, factor);
        }
    }

    private void DealSpicyDamage(HDPlayerPawn plr, int amount) {
        plr.A_SetBlend(0xa7b55e, 0.15, 12);

        switch (_damageType.GetInt()) {
            case SADT_STUN:
                DealSpicyStun(plr, amount);
                break;
            case SADT_FATIGUE:
                DealSpicyFatigue(plr, amount);
                break;
            case SADT_TISSUE:
                DealSpicyTissueDamage(plr, amount);
                break;
            case SADT_BLOOD:
                DealSpicyBloodLoss(plr, amount);
                break;
            case SADT_BURN:
                DealSpicyBurns(plr, amount);
                break;
            case SADT_AGGRO:
                DealSpicyAggro(plr, amount);
                break;
            case SADT_WOUND:
                DealSpicyWound(plr, amount);
                break;
            case SADT_AUTO:
            default:

                if (amount >= SADT_STUN)    DealSpicyStun(plr, max(1, amount - SADT_STUN));
                if (amount >= SADT_FATIGUE) DealSpicyFatigue(plr, max(1, amount - SADT_FATIGUE));
                if (amount >= SADT_TISSUE)  DealSpicyTissueDamage(plr, max(1, amount - SADT_TISSUE));
                if (amount >= SADT_BLOOD)   DealSpicyBloodLoss(plr, max(1, amount - SADT_BLOOD));
                if (amount >= SADT_BURN)    DealSpicyBurns(plr, max(1, amount - SADT_BURN));
                if (amount >= SADT_AGGRO)   DealSpicyAggro(plr, max(1, amount - SADT_AGGRO));
                if (amount >= SADT_WOUND)   DealSpicyWound(plr, max(1, amount - SADT_WOUND));

                break;
        }
    }

    private void DealSpicyStun(HDPlayerPawn plr, int amount) {
        plr.stunned += 32 << amount;
    }

    private void DealSpicyFatigue(HDPlayerPawn plr, int amount) {
        plr.fatigue += 1 << amount;
    }

    private void DealSpicyTissueDamage(HDPlayerPawn plr, int amount) {
        plr.oldWoundCount += amount;
    }

    private void DealSpicyBloodLoss(HDPlayerPawn plr, int amount) {
        plr.bloodLoss += 8 << amount;
    }

    private void DealSpicyBurns(HDPlayerPawn plr, int amount) {
        plr.burnCount += amount;
    }

    private void DealSpicyAggro(HDPlayerPawn plr, int amount) {
        plr.aggravatedDamage += amount;
    }

    private void DealSpicyWound(HDPlayerPawn plr, int amount) {
        let numWounds = random(1, 1 << amount);
        for (let i = 0; i < numWounds; i++) {
            HDBleedingWound.inflict(plr, amount, damageType: 'internal');
        }
    }
}

enum SPICY_SOURCE_FLAGS {
    SASF_SPICY_MONSTERS  = 1,
    SASF_SPICY_FRAG      = 2,
    SASF_SPICY_BARRELS   = 4,
    SASF_SPICY_FRIENDLY  = 8,
    SASF_SPICY_BOSSES    = 16,
    SASF_SPICY_HURTFLOOR = 32,
    SASF_SPICY_OUTDOORS  = 64,
    SASF_SPICY_SECRETS   = 128
}

enum SPICY_SINK_FLAGS {
    SASF_SINK_UNDERWATER = 1,
    SASF_SINK_OUTDOORS   = 2,
    SASF_SINK_SECRETS    = 4
}

enum SPICY_DISTANCE_CALCS {
    SADC_INVERSE_SQRT,
    SADC_INVERSE_SQUARE,
    SADC_REVERSE_LOG,
    SADC_REVERSE_SQRT,
    SADC_LINEAR
}

enum SPICY_DAMAGE_TYPES {
    SADT_AUTO,
    SADT_STUN,
    SADT_FATIGUE,
    SADT_TISSUE,
    SADT_BLOOD,
    SADT_BURN,
    SADT_AGGRO,
    SADT_WOUND
}
