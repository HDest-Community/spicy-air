class SpicyAirHandler : EventHandler {

    int BreathIndex[MAXPLAYERS];
    int BreathHoldTimer[MAXPLAYERS];
    int RealSpiciness[MAXPLAYERS];
    int SpicyLevel[MAXPLAYERS];
    double CleanAirPercentage;

    Array<Name> monsterClasses;
    Array<Name> monsterExceptions;

    Array<Name> fragClasses;
    Array<Name> fragExceptions;

    Array<Name> barrelClasses;
    Array<Name> barrelExceptions;

    private transient Service _HHFunc;
    private transient Service _RespService;

    private transient CVar _enabled;

    private transient CVar _maxSpiciness;

    private transient CVar _secretsClean;
    private transient CVar _outdoorsClean;
    private transient CVar _underwaterClean;

    private transient CVar _spicySources;
    private transient CVar _spicySourceDistance;

    private transient CVar _minKillReq;
    private transient CVar _maxKillReq;

    private transient CVar _damageThreshold;
    private transient CVar _radsuitProtection;
    private transient CVar _hhelmetProtection;

    override void WorldLoaded(WorldEvent e) {

        InitCvars();
        InitArrays();

        if (e.IsReopen) return;

        // Initialize  Status
        CleanAirPercentage = frandom[desprand](_minKillReq.GetFloat(), _maxKillReq.GetFloat());
        
        for (int i = 0; i < MAXPLAYERS; i++) {
            BreathIndex[i] = 0;
            RealSpiciness[i] = 0;
            SpicyLevel[i] = 0;
            BreathHoldTimer[i] = Level.AirSupply; // * players[i].mo.AirCapacity;
        }
    }

    override void RenderUnderlay(RenderEvent e) {
        let plr = HDPlayerPawn(e.Camera);
        if (!plr || plr.bINVISIBLE || plr.bSHADOW) {
            return;
        }
        
        let mask = Despicyto(plr.FindInventory('Despicyto'));
        bool hasHelmet = _HHFunc && _HHFunc.GetIntUI("GetShowHUD", objectArg: plr);

        if (
            (
                (mask && mask.Worn)
                || (hasHelmet && _hhelmetProtection.GetInt() > 0)
            )
            && !automapactive
        ) {
            int MaskHeight = int(Screen.GetHeight() * 2.2);
            int MaskWidth = int(Screen.GetWidth() * MaskHeight * 1.2) / Screen.GetHeight();
            int MaskOffX = -((MaskWidth - Screen.GetWidth()) >> 1);
            int MaskOffY = -((MaskHeight - Screen.GetHeight()) >> 1);

            let goggles = PortableLiteAmp(plr.FindInventory('PortableLiteAmp'));

            // Only handle breathing animation if Spicy Air is enabled
            if (_enabled.GetBool()) {
                double breathFactor = BreathIndex[plr.PlayerNumber()] / double(GetBreathDelay(plr));
                double breathAlpha = clamp(CVar.GetCVar('spicy_breathalpha', players[plr.PlayerNumber()]).GetFloat(), 0.0, 1.0);
                breathFactor = 0.1 + min(1.0, abs(breathFactor > 0 ? breathFactor * 2.25 : breathFactor)) * breathAlpha;

                if (goggles && goggles.worn) {
                    breathFactor *= 0.1 - (goggles.amplitude / PortableLiteAmp.NITEVIS_MAX) * 0.05;
                }

                if (breathFactor > 0.0) {
                    Screen.DrawTexture(TexMan.CheckForTexture("DESPMOIS"), true, MaskOffX - (int(plr.wepbob.x * 0.5)), MaskOffY - (int(plr.wepbob.y * 0.5)), DTA_Alpha, breathFactor, DTA_DestWidth, MaskWidth, DTA_DestHeight, MaskHeight);
                }
            }

            // Rendering the Overlay can happen even if the mod is disabled,
            // as the gas mask feels a bit pointless otherwise.
            double maskAlpha = clamp(CVar.GetCVar('spicy_gasmaskalpha', players[plr.PlayerNumber()]).GetFloat(), 0.0, 1.0);
            if ((mask && mask.Worn) && !(goggles && goggles.worn) && maskAlpha > 0.0) {
				Screen.DrawTexture(TexMan.CheckForTexture("DESPMASK"), true, MaskOffX - (int(plr.wepbob.x * 0.5)), MaskOffY - (int(plr.wepbob.y * 0.5)), DTA_Alpha, maskAlpha, DTA_DestWidth, MaskWidth, DTA_DestHeight, MaskHeight);
            }
        }
    }

    override void WorldTick() {

        if (!_enabled) InitCvars();

        if (!_enabled.GetBool() || Level.IsFrozen()) return;
        
        InitArrays();

        // TODO: Refactor following logic into separate functions
        for (int i = 0; i < MAXPLAYERS; i++) {
            let plr = HDPlayerPawn(players[i].mo);

            if (!plr || plr.Health <= 0) continue;

            // Handle Player Breathing
            // -----------------------
            // The player is "currently breathing" if:
            // - They are not submerged underwater, or if they are, they're wearing a UaS Respirator and it has air in it
            // - They are wearing a gas mask
            // - They are wearing a Hideous Helmet and it provides protection against spicy air
            let mask = Despicyto(plr.FindInventory('Despicyto'));
            bool hasHelmet = _HHFunc && _HHFunc.GetInt("GetShowHUD", objectArg: plr);
            bool wearingRespirator = _RespService && _RespService.GetInt("IsWorn", objectArg: plr);
            bool respiratorAir = _RespService && _RespService.GetInt("AirRemaining", objectArg: plr);
            int bDelay = GetBreathDelay(plr);
            if ((plr.WaterLevel < 3 || (wearingRespirator && respiratorAir > 0)) || (mask && mask.Worn) || (hasHelmet && _hhelmetProtection.GetInt() > 0)) {

                BreathIndex[i]++;
                if (BreathIndex[i] >= bDelay) {
                    BreathIndex[i] = -bDelay;
                }
            } else {
                BreathIndex[i] = 0;
            }

            // Display Visual/Auditory Feedback of breathing
            if ((mask && mask.Worn) || (hasHelmet && _hhelmetProtection.GetInt() > 0)) {
                int bSpeed = GetBreathSpeed(plr);

                double vol = clamp(CVar.GetCVar('spicy_breathingvolume', players[i]).GetFloat(), 0, 1);
                
                if (BreathIndex[i] == 0 && vol > 0) {
                    plr.A_StartSound("SpicyAir/Mask/BreatheOut"..bSpeed, 35, CHANF_LOCAL, vol, pitch: frandom[breathrand](0.97, 1.0));
                }

                if (BreathIndex[i] == -bDelay) {

                    if (vol > 0) {
                        plr.A_StartSound("SpicyAir/Mask/BreatheIn"..bSpeed, 36, CHANF_LOCAL, vol, pitch: frandom[breathrand](0.97, 1.0));
                    }

                    if (mask && mask.Worn) {
                        if (mask.weaponStatus[DEProp_FilterLife1] > 0) {
                            mask.weaponStatus[DEProp_FilterLife1]--;
                        } else if (mask.weaponStatus[DEProp_FilterLife2] > 0) {
                            mask.weaponStatus[DEProp_FilterLife2]--;
                        }
                    }
                }
            }

            // Handle Air Toxicity Logic
            // -------------------------
            // - If the air being breathed in is clean, adjust "breath hold timer" depending if the player is underwater or wearing a respirator providing air
            // - If the air being breathed in is clean or filtered, reduce spiciness while the player is breathing out
            // - If the air being breathed in is not clean nor filtered, if the player has breath left to hold, reduce timer; otherwise add spiciness while the player is breathing in
            // - If the player has gathered enough spiciness in their system, increase their spicy level
            // - As long as the player still has some amount of spiciness levels in their system, every time the timer ticks, add aggro based on their spicy level
            let aggroTime = 35 * GetAggroThreshold(plr);

            if (IsAirClean(plr)) {

                if (hd_debug && !(Level.time % 35)) Console.PrintF("[Player #"..(i + 1).."] Air is clean! "..(BreathHoldTimer[i] / 35).."s");

                if (BreathIndex[i] > 0) RealSpiciness[i] -= max(RealSpiciness[i] / aggroTime, 1);
                BreathHoldTimer[i] = clamp(BreathHoldTimer[i] + ((plr.WaterLevel < 3 || (wearingRespirator && respiratorAir > 0)) ? 5 : -1), 0, Level.AirSupply * plr.AirCapacity);
            } else if (IsAirFiltered(plr)) {

                if (hd_debug && !(Level.time % 35)) Console.PrintF("[Player #"..(i + 1).."] Air is filtered! "..(BreathHoldTimer[i] / 35).."s");

                if (BreathIndex[i] > 0) RealSpiciness[i] -= max(RealSpiciness[i] / aggroTime, 1);
            } else if (BreathHoldTimer[i] > 0) {

                if (hd_debug && !(Level.time % 35)) Console.PrintF("[Player #"..(i + 1).."] Air is spicy! "..(BreathHoldTimer[i] / 35).."s");

                BreathHoldTimer[i] = clamp(BreathHoldTimer[i] - 1, 0, Level.AirSupply * plr.AirCapacity);
            } else {

                if (hd_debug && !(Level.time % 35)) Console.PrintF("[Player #"..(i + 1).."] Air is spicy, too spicy! Breathing "..(BreathIndex[i] < 0 ? "in" : "out")..", "..RealSpiciness[i]);

                if (BreathIndex[i] < 0) RealSpiciness[i]++;
            }

            RealSpiciness[i] = clamp(RealSpiciness[i], 0, aggroTime * _maxSpiciness.GetInt());
            SpicyLevel[i] = clamp(RealSpiciness[i] / aggroTime, 0, _maxSpiciness.GetInt());

            if (hd_debug && !(Level.time % 35)) Console.PrintF("[Player #"..(i + 1).."] Spiciness Level: "..(RealSpiciness[i] / aggroTime));

            if (SpicyLevel[i] > 0 && !(Level.time % aggroTime)) {
                if (hd_debug) Console.PrintF("[Player #"..(i + 1).."] Oof ouch, my blood! x"..SpicyLevel[i]);

                plr.A_SetBlend(0xa7b55e, 0.15, 12);
                plr.aggravateddamage += SpicyLevel[i];
            }
        }
    }

    private void InitCvars() {
        if (!_HHFunc) _HHFunc                       = ServiceIterator.Find("HHFunc").Next();
        if (!_RespService) _RespService             = ServiceIterator.Find("UaS_RespiratorStatus").Next();

        if (!_enabled) _enabled                     = CVar.GetCVar('spicy_enabled');

        if (!_maxSpiciness) _maxSpiciness           = CVar.GetCVar('spicy_max_spiciness');

        if (!_damageThreshold) _damageThreshold     = CVar.GetCVar('spicy_damagethreshold');
        if (!_radsuitProtection) _radsuitProtection = CVar.GetCVar('spicy_radsuitprotection');
        if (!_hhelmetProtection) _hhelmetProtection = CVar.GetCVar('spicy_hhelmetprotection');

        if (!_outdoorsClean) _outdoorsClean         = CVar.GetCVar('spicy_outdoors_clean');
        if (!_secretsClean) _secretsClean           = CVar.GetCVar('spicy_secrets_clean');
        if (!_underwaterClean) _underwaterClean     = CVar.GetCVar('spicy_underwater_clean');

        if (!_spicySources) _spicySources           = CVar.GetCVar('spicy_sources');

        if (!_spicySourceDistance) _spicySourceDistance = CVar.GetCVar('spicy_source_distance');

        if (!_minKillReq) _minKillReq               = CVar.GetCVar('spicy_min_kill_req');
        if (!_maxKillReq) _maxKillReq               = CVar.GetCVar('spicy_max_kill_req');
    }

    private void InitArrays() {
        if (!monsterClasses.Size()) {
            monsterClasses.push('HDMobBase');
        }

        if (!monsterExceptions.Size()) {
            monsterExceptions.push('HDBarrel');
        }
        
        if (!fragClasses.Size()) {
            fragClasses.push('BFGNecroShard');
        }

        // if (!fragExceptions.Size()) {
        //     fragExceptions.push('');
        // }
        
        if (!barrelClasses.Size()) {
            barrelClasses.push('HDBarrel');
        }

        // if (!barrelExceptions.Size()) {
        //     barrelExceptions.push('');
        // }
    }

    // The air is considered clean if:
    //  - The current map is the Firing Range or Reloading Room
    //  - Secrets are considered clean and the player is currently inside of one
    //  - The player is currently inside of a sector marked as non-spicy
    //  - Monsters are set to not cause spicy air or the players have killed enough of them
    //  - Frage is set to not cause spicy air or there currently isn't any present
    bool IsAirClean(HDPlayerPawn plr) {

        if (level.MapName == 'RANGE' || level.MapName == 'ReloadingRoom') return true;

        bool clean = plr.CurSector.GetUDMFInt('user_nonspicysector') == 1;

        if (hd_debug && !(Level.time % 35)) Console.PrintF("Current Sector Spicy? "..!clean);

        if (_secretsClean.GetBool()) {
            if (hd_debug && !(Level.time % 35) && plr.CurSector.WasSecret()) Console.PrintF("Current Sector is Clean: Secret");

            clean |= plr.CurSector.WasSecret();
        }

        if (_outdoorsClean.GetBool()) {
            if (hd_debug && !(Level.time % 35) && plr.CurSector.GetTexture(1) == skyflatnum) Console.PrintF("Current Sector is Clean: Outdoors");

            clean |= plr.CurSector.GetTexture(1) == skyflatnum;
        }

        if (_underwaterClean.GetBool()) {
            if (hd_debug && !(Level.time % 35) && plr.WaterLevel >= 3) Console.PrintF("Current Sector is Clean: Underwater");

            clean |= plr.WaterLevel >= 3;
        }

        int spicySources = _spicySources.GetInt();
        int activeSources = IsNearSpicySource(plr, monsterClasses, monsterExceptions)
            + (IsNearSpicySource(plr, fragClasses, fragExceptions) << 1)
            + (IsNearSpicySource(plr, barrelClasses, barrelExceptions) << 2);

        if (hd_debug && !(Level.time % 35)) {
            Console.PrintF("Clean Air Percent: "..CleanAirPercentage);
            Console.PrintF("Spicy Sources: "..spicySources..", Active Sources: "..activeSources..", Are Sources Spicy? "..(spicySources&activeSources));
            Console.PrintF("Is Air Clean? "..clean|!(spicySources&activeSources));
        }

        return clean |= !(spicySources&activeSources);
    }

    bool IsAirFiltered(HDPlayerPawn plr) {
        let mask = Despicyto(plr.FindInventory('Despicyto'));

        return mask && mask.Worn && mask.A_GetTotalAir(false) > 0;
    }

    clearscope int GetBreathDelay(HDPlayerPawn plr) {
        return 90 - int(min(max(plr.fatigue * 2, plr.bloodpressure / 1.3, 110 * (1.0 - plr.beatmax / 35.0)), 80));
    }

    clearscope int GetBreathSpeed(HDPlayerPawn plr) {
        return 3 - int(min(GetBreathDelay(plr) / 35, 2));
    }

    private int GetAggroThreshold(HDPlayerPawn plr) {
        bool hasHelmet = _HHFunc && _HHFunc.GetInt("GetShowHUD", objectArg: plr);

        let threshold = _damageThreshold.GetInt();
        let radsuitBonus = _radsuitProtection.GetInt();
        let hhelmetBonus = _hhelmetProtection.GetInt();

        let totalBonus = 1.0;

        if (radsuitBonus > 0 && plr.FindInventory('WornRadsuit')) {
            totalBonus += radsuitBonus;
        }

        if (hhelmetBonus > 0 && hasHelmet) {
            totalBonus += hhelmetBonus;
        }

        return threshold * totalBonus;
    }

    private bool IsNearSpicySource(HDPlayerPawn plr, Array<Name> whitelist, Array<Name> blacklist) {
        let value = 0.0;

        foreach (sourceName : whitelist) {
            let iter = ThinkerIterator.create(sourceName);

            Actor mo;
            while (mo = Actor(iter.next())) {

                if (mo.health > 0 && !IsSourceAnException(mo, blacklist)) {
                    let dist = max(1, plr.Distance3D(mo));

                    value += mo.SpawnHealth() * mo.scale.x * _spicySourceDistance.GetFloat() / (dist * dist);
                }
            }

            if (hd_debug && !(Level.time % 35)) Console.PrintF("Proximity to '"..sourceName.."': "..(value * HDCONST_ONEMETRE));
        }

        return value * HDCONST_ONEMETRE >= (1.0 - CleanAirPercentage);
    }

    private bool IsSourceAnException(Actor source, Array<Name> exceptions) {
        foreach (exception : exceptions) if (source is exception) return true;
        return false;
    }
}

enum SPICY_SOURCE_FLAGS {
    SASF_MONSTERS = 1,
    SASF_FRAG     = 2,
    SASF_BARRELS  = 4
}
