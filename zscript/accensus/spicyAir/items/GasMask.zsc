class Despicyto : HDWeapon {

    override void Tick() {
        Super.Tick();

        if (!_handler) _handler = SpicyAirHandler(EventHandler.Find('SpicyAirHandler'));
        if (!_HHFunc) _HHFunc   = ServiceIterator.Find("HHFunc").Next();

        let plr = HDPlayerPawn(owner);

        // [Ace] If the player gets morphed to something else that's not HDPlayerPawn, the mask won't function and will abort. This prevents that.
        if (!owner || !owner.player || !plr) {
            AutowearTicker = 0;
            Worn = false;
            return;
        }

        if (owner.Health <= 0) return;

        if (!Worn && ++AutowearTicker == 4 && owner.player.cmd.buttons & BT_USE) A_WearMask();
        if (Worn && _HHFunc && _HHFunc.GetObject("FindHelmet", objectArg: owner)) A_UnwearMask();

        IsAirToxic = !_handler.IsAirClean(plr);
    }

    clearscope action int A_GetTotalAir(bool percentage) {
        int F1 = percentage ? int(ceil((invoker.WeaponStatus[DEProp_FilterLife1] / double(DespicytoFilter.MaxAir)) * 50)) : invoker.WeaponStatus[DEProp_FilterLife1];
        int F2 = percentage ? int(ceil((invoker.WeaponStatus[DEProp_FilterLife2] / double(DespicytoFilter.MaxAir)) * 50)) : invoker.WeaponStatus[DEProp_FilterLife2];
        return (F1 >= 0 ? F1 : 0) + (F2 >= 0 ? F2 : 0);
    }

    private action void A_AddOffset(int ofs) {
        invoker.WeaponStatus[DEProp_UseOffset] += ofs;
    }

    override bool Use(bool pickup) {
        if (owner && Worn) {
            A_UnwearMask();
            return false;
        }

        return Super.Use(pickup);
    }

    override bool AddSpareWeapon(Actor newowner) {
        return AddSpareWeaponRegular(newowner);
    }
    
    override HDWeapon GetSpareWeapon(Actor newowner, bool reverse, bool doselect) {
        return GetSpareWeaponRegular(newowner, reverse, doselect);
    }
    
    override string, double GetPickupSprite() {
        int F1 = WeaponStatus[DEProp_FilterLife1];
        int F2 = WeaponStatus[DEProp_FilterLife2];

        string Frame = "D";
        if (F1 >= 0 && F2 >= 0) {
            Frame = "A";
        } else if (F1 >= 0 && F2 == -1) {
            Frame = "B";
        } else if (F1 == -1 && F2 >= 0) {
            Frame = "C";
        }

        return "DSPG"..Frame.."0", 1.0;
    }

    override int GetSbarNum(int flags) {
        let HDHud = HDStatusBar(StatusBar);

        HDHud.SavedColour = Font.CR_DARKGRAY;
        return A_GetTotalAir(true);
    }

    override int DisplayAmount() {
        let HDHud = HDStatusBar(StatusBar);
        return Worn ? IsAirToxic : ActualAmount;
    }

    override string GetHelpText() {
        return WEPHELP_RELOAD.."  Place left filter\n"
        ..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Place right filter\n"
        ..WEPHELP_UNLOAD.."  Remove left filter\n"
        ..WEPHELP_USE.."+"..WEPHELP_UNLOAD.."  Remove right filter";
    }

    override double WeaponBulk() {
        return Worn ? 5 : 22;
    }

    override bool IsBeingWorn() {
        return Worn;
    }

    override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl) {
		vector2 bob = hpl.wepbob * 0.3;
        int Offset = WeaponStatus[DEProp_UseOffset];
        bob.y += Offset;
        
        sb.DrawImage(GetPickupSprite(), bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER, alpha: 1.0, scale:(4, 4));
        if (WeaponStatus[DEProp_FilterLife1] >= 0) {
            sb.DrawString(sb.mAmountFont, sb.FormatNumber(WeaponStatus[DEProp_FilterLife1], 4, 4, sb.FNF_FILLZEROS), (-40, 44) + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_RIGHT, Font.CR_DARKGRAY);
        }
        if (WeaponStatus[DEProp_FilterLife2] >= 0) {
            sb.DrawString(sb.mAmountFont, sb.FormatNumber(WeaponStatus[DEProp_FilterLife2], 4, 4, sb.FNF_FILLZEROS), (40, 44) + bob, sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_DARKGRAY);
        }
    }

    override void InitializeWepStats(bool idfa) {
        WeaponStatus[DEProp_FilterLife1] = DespicytoFilter.MaxAir;
        WeaponStatus[DEProp_FilterLife2] = DespicytoFilter.MaxAir;
    }

    override void LoadoutConfigure(string input) {
        int Worn = GetLoadoutVar(input, "worn", 1);
        if (Worn > 0) {
            A_WearMask();
        }
        int LF = GetLoadoutVar(input, "lf", 4);
        if (LF > 0) {
            WeaponStatus[DEProp_FilterLife1] = min(LF, DespicytoFilter.MaxAir);
        }
        int RF = GetLoadoutVar(input, "rf", 4);
        if (RF > 0) {
            WeaponStatus[DEProp_FilterLife2] = min(RF, DespicytoFilter.MaxAir);
        }
    }

    private action void A_WearMask() {
        if (invoker.Worn || (invoker._HHFunc && invoker._HHFunc.GetObject("FindHelmet", objectArg: invoker.owner))) return;

        // [Ace] Necessary because LoadoutConfigure will call this before it's attached to the owner.
        if (invoker.owner) {

            if (invoker._handler) invoker._handler.BreathHoldTimer[invoker.owner.PlayerNumber()] = 0;

            invoker.owner.A_StartSound("weapons/pocket", 9);
            invoker.owner.A_SetBlend(0x000000, 1.0, 16);
        }
        invoker.Worn = true;
    }

    private action void A_UnwearMask() {
        if (!invoker.Worn) return;

        if (A_GetTotalAir(false) > 0) {
            int toTake = 10;
            int F1 = invoker.WeaponStatus[DEProp_FilterLife1];
            int F2 = invoker.WeaponStatus[DEProp_FilterLife2];

            if (invoker.IsAirToxic) {
                if (F1 > 0) {
                    invoker.WeaponStatus[DEProp_FilterLife1] -= min(toTake, F1);
                    toTake -= min(toTake, F1);
                }

                if (F2 > 0) {
                    invoker.WeaponStatus[DEProp_FilterLife2] -= min(toTake, F2);
                    toTake -= min(toTake, F2);
                }
            }

            if (invoker._handler) invoker._handler.BreathHoldTimer[invoker.owner.PlayerNumber()] = 35 * (3 * (10 - toTake));

            invoker.owner.A_StartSound("SpicyAir/Mask/BreatheIn1", 36, CHANF_LOCAL, clamp(CVar.GetCVar('spicy_breathingvolume', invoker.owner.player).GetFloat(), 0, 1), pitch: frandom[breathrand](0.98, 1.0));
        }

        invoker.owner.A_StartSound("weapons/pocket", 9);
        invoker.owner.A_SetBlend(0x000000, 1.0, 16);
        invoker.Worn = false;
    }
    
    override void DetachFromOwner() {
        A_UnwearMask();
        Super.DetachFromOwner();
    }

    Default {
        +INVENTORY.INVBAR
        +HDWEAPON.FITSINBACKPACK
        +WEAPON.WIMPY_WEAPON

        Tag "$TAG_GASMASK";

        HDWeapon.RefId HDLD_GASMASK;
        Inventory.Icon "DSPGA0";
        Scale 0.35;

        Inventory.PickupSound "weapons/pocket";
        Inventory.PickupMessage "$PICKUP_GASMASK";
        HDWeapon.WornLayer STRIP_RADSUIT + 1;
    }

    private transient SpicyAirHandler _handler;
    private transient Service _HHFunc;

    private bool IsAirToxic;
    private int WhichFilter;
    private int AutowearTicker;
    bool Worn;

    States {
        Spawn:
            DSPG A 0 NoDelay {
                int F1 = invoker.WeaponStatus[DEProp_FilterLife1];
                int F2 = invoker.WeaponStatus[DEProp_FilterLife2];

                if (F1 >= 0 && F2 >= 0) {
                    frame = 0;
                } else if (F1 >= 0 && F2 == -1) {
                    frame = 1;
                } else if (F1 == -1 && F2 >= 0) {
                    frame = 2;
                } else {
                    frame = 3;
                }
            }
            DSPG # -1;
            Stop;
        Select:
            TNT1 A 0 A_AddOffset(200);
            Goto Super::Select;
        Ready:
            TNT1 A 1 {
                if (PressingUser3()) {
                    A_MagManager("DespicytoFilter");
                    return;
                }

                int off = invoker.WeaponStatus[DEProp_UseOffset];
                if (off > 0) {
                    invoker.WeaponStatus[DEProp_UseOffset] = off * 2 / 3;
                }

                if (PressingFire() || PressingAltfire()) {
                    SetWeaponState("Lower");
                    return;
                }

                A_WeaponReady(WRF_ALL | WRF_NOFIRE);
            }
            Goto ReadyEnd;
        Lower:
            TNT1 A 0 A_JumpIf(invoker._HHFunc && invoker._HHFunc.GetObject("FindHelmet", objectArg: invoker.owner), "Nope");
            TNT1 AA 1 A_AddOffset(6);
            TNT1 AAAA 1 A_AddOffset(18);
            TNT1 AAAAA 1 A_AddOffset(36);
            TNT1 A 0 A_JumpIf(!PressingFire() && !PressingAltfire(), "Ready");
            TNT1 A 1 A_WearMask();
        Hold:
            TNT1 A 1;
            TNT1 A 0 A_Refire("Hold");
            TNT1 A 0 A_SelectWeapon("HDFist");
            Goto Deselect;
        Unload:
            TNT1 A 20 {
                invoker.WhichFilter = PressingUse() ? DEProp_FilterLife2 : DEProp_FilterLife1;

                // [Ace] You think that's air you're breathing now?
                int air = invoker.WeaponStatus[invoker.WhichFilter];
                if (air < 0) {
                    SetWeaponState('ReloadEnd');
                    return;
                }
            }
            TNT1 A 5 {
                int air = invoker.WeaponStatus[invoker.WhichFilter];
                if (PressingUnload() || PressingReload()) {
                    HDMagAmmo.GiveMag(self, "DespicytoFilter", Air);
                    A_StartSound("weapons/pocket", 9);
                    A_SetTics(20);
                } else {
                    HDBattery.SpawnMag(self, "DespicytoFilter", Air);
                }
                invoker.WeaponStatus[invoker.WhichFilter] = -1;
                invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
            }
            Goto ReloadEnd;
        Reload:
            TNT1 A 14 {
                invoker.WhichFilter = PressingUse() ? DEProp_FilterLife2 : DEProp_FilterLife1;
                if (invoker.WeaponStatus[invoker.WhichFilter] >= 0 || !CheckInventory('DespicytoFilter', 1)) {
                    SetWeaponState('ReloadEnd');
                    return;
                }

                A_StartSound("weapons/pocket", 9);
            }
            TNT1 A 5 {
                let filter = HDMagAmmo(FindInventory("DespicytoFilter"));
                if(!filter) return;
                
                invoker.WeaponStatus[invoker.WhichFilter] = filter.TakeMag(true);
                A_StartSound("SpicyAir/Mask/Remove", 8, CHANF_OVERLAP);
                invoker.Icon = TexMan.CheckForTexture(invoker.GetPickupSprite(), TexMan.Type_Any);
            }
            Goto ReloadEnd;
        ReloadEnd:
            TNT1 A 6;
            Goto ready;
    }
}

enum DEProperties {
    DEProp_Flags,
    DEProp_UseOffset,
    DEProp_FilterLife1,
    DEProp_FilterLife2,
}